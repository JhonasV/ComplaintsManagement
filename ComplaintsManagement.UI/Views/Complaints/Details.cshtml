@model ComplaintsManagement.UI.Models.ComplaintsViewModel
@{
    ViewBag.Title = "Detail";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var complaint = Model.Complaint.Data;
}

<div class="card">
    <div class="card-header bg-primary d-flex justify-content-between">
        <div>
            <h3 class="text-white">Detalles del Reclamo o Queja</h3>
        </div>
        <div class="d-flex">
            <div class="alert alert-warning mr-2">Estado: <span class="font-weight-bold">@complaint.Status.Name</span> </div>
            <div class="alert alert-warning">Tipo Ticket: <span class="font-weight-bold">@complaint.TicketType.Description</span> </div>
        </div>
    </div>
    <div class="container">
        <div class="row card-body">
            <div class="col-12">
                <div class="form-group">
                    <h5>Cliente: </h5>
                    <h5 class="font-weight-bold">@complaint.Customer.Name @complaint.Customer.LastName</h5>
                    <hr />
                </div>
            </div>
            <div class="col-12">
                <div class="form-group">
                    <h5>Departamento Responsable:</h5>
                    <h5 class="font-weight-bold">@complaint.Deparment.Name</h5>
                    <hr />
                </div>
            </div>
            <div class="col-12">
                <div class="form-group">
                    <h5>Fecha de creación:</h5>
                    <h5 class="font-weight-bold">@complaint.CreatedAt.ToString("MM/dd/yyyy hh:mm tt")</h5>
                    <hr />
                </div>
            </div>
            <div class="col-12">
                <div class="form-group">
                    <h5>Producto reportado:</h5>
                    <h5 class="font-weight-bold">@complaint.Product.Name</h5>
                    <hr />
                </div>
            </div>
            <div class="col-12">
                <div class="form-group">
                    <h5>Razón:</h5>
                    <h5 class="font-weight-bold">@complaint.ComplaintsOption.Name</h5>
                    <hr />
                </div>
            </div>
            <div class="col-12">
                <div class="form-group">
                    <h5>Comentario del cliente:</h5>
                    <h5 class="font-weight-bold">@complaint.Comment</h5>
                    <hr />
                </div>
            </div>
        </div>
    </div>

    <div class="card-header bg-primary d-flex justify-content-between">
        <div>
            <h3 class="text-white">Bitácora</h3>
        </div>
        <div class="d-flex">
            @if (User.Identity.Name == complaint.Customer.Email)
            {
                <div class="form-group">
                    <button class="btn btn-warning">Cerrar @complaint.TicketType.Description </button>
                </div>
            }
        </div>
    </div>
    <div class="container card-body">
        <div class="row ">
            <div class="col-12">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Usuario</th>
                            <th>Fecha</th>
                            <th>Estado</th>
                            <th>Comentario</th>
                        </tr>
                    </thead>
                    <tbody id="binnacle_tbody">

                        @foreach (var binnacle in complaint.Binnacles)
                        {
                            <tr>
                                <td>@binnacle.User.Name @binnacle.User.LastName</td>
                                <td>@binnacle.CreatedAt.ToString("MM/dd/yyyy hh:mm tt")</td>
                                <td>@binnacle.Status.Name.ToUpper()</td>
                                <td>@binnacle.Comment.ToUpper()</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <hr />
                <div class="form-group">
                    <textarea class="form-control" id="comment_textarea" placeholder="Comentario de seguimiento."></textarea>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <div class="form-group">
                    <button id="add_comment_btn" class="btn btn-primary">Agregar comentario</button>
                </div>
            </div>
        </div>
    </div>


   @{
       Html.RenderPartial("_UpdateStatusFormPartial");
       Html.RenderPartial("_ServiceRateFormPartial");
   }

    </div>

@section Scripts {
    <script>
        const binnacleTBody = document.querySelector("#binnacle_tbody");
        const commentTextArea = document.querySelector("#comment_textarea");
        const addCommentBtn = document.querySelector("#add_comment_btn");
        const complaintsId = @complaint.Id;
        const getBinnacles = () => {


            fetch(`/binnacles/get?complaintsId=${complaintsId}`)
                .then(e => e.json())
                .then(e => console.log(e))
                .catch(e => console.error(e));
        }



        const createBinnacle = (comment) => {
            let binnacle = {
                comment,
                complaintsId: complaintsId
            };

            fetch("/binnacles/add", {
                method: "POST",
                headers: { "accept": "application/json", "content-type": "application/json" },
                body: JSON.stringify(binnacle)
            })
                .then(e => e.json())
                .then(e => {
                    //Draw new binnacle row
                    location.reload();
                })
                .catch(e => console.error(e));


            //ApplicationUserId = Data.UsersId,
            //    StatusId = Data.StatusId,
            //    Comment = $"La {ticketType.Data.Description} se ha creado con el estado: {StatusName.COMMITED}",
            //        ComplaintsId = result.Data.Id
        }


        addCommentBtn.addEventListener("click", (e) => {
            if (commentTextArea.value.length === 0) {
                alert("Debe de escribir un comentario");
                return;
            }


            createBinnacle(commentTextArea.value);

        });

        document.onload = getBinnacles();
    </script>
}
