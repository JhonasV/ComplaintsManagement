@model  ComplaintsManagement.UI.Models.TaskResult<ComplaintsManagement.Infrastructure.DTOs.RolesDto>

@{ 
    var isUpdate = Model?.Data?.Id != null;
    var actionName = isUpdate ? "Edit" : "Create";
    var title = isUpdate ? "Edición de Roles" : "Creación  de Roles";
    var btnTitle = isUpdate ? "Actualizar" : "Crear";
}

@using (Html.BeginForm(controllerName: "Roles", actionName: actionName, method: FormMethod.Post))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(e => e.Data.Id)
    <div class="form-horizontal">
        <h4>@title</h4>
        <hr />
        @if (!Model.Success)
        {
            <span class="alert alert-danger" style="margin-top: 2rem;">@Model.Message</span>
            <hr />
        }

        @if (Model.Success && Model.Message?.Length > 0)
        {
            <span class="alert alert-success" style="margin-top: 2rem;">@Model.Message</span>
            <hr />
        }

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Data.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Data.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Data.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="@btnTitle" class="btn btn-primary" />
            </div>
        </div>
    </div>
}
